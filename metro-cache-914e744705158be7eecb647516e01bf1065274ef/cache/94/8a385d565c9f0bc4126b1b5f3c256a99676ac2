__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createPathParser = exports.urlToPathAndParams = undefined;

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _pathToRegexp = _require(_dependencyMap[0], "path-to-regexp");

  var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

  var _NavigationActions = _require(_dependencyMap[1], "../NavigationActions");

  var _NavigationActions2 = _interopRequireDefault(_NavigationActions);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var queryString = _require(_dependencyMap[2], 'query-string');

  function isEmpty(obj) {
    if (!obj) return true;

    for (var key in obj) {
      return false;
    }

    return true;
  }

  var urlToPathAndParams = exports.urlToPathAndParams = function urlToPathAndParams(url, uriPrefix) {
    var searchMatch = url.match(/^(.*)\?(.*)$/);
    var params = searchMatch ? queryString.parse(searchMatch[2]) : {};
    var urlWithoutSearch = searchMatch ? searchMatch[1] : url;
    var delimiter = uriPrefix || '://';
    var path = urlWithoutSearch.split(delimiter)[1];

    if (path === undefined) {
      path = urlWithoutSearch;
    }

    if (path === '/') {
      path = '';
    }

    if (path[path.length - 1] === '/') {
      path = path.slice(0, -1);
    }

    return {
      path: path,
      params: params
    };
  };

  var createPathParser = exports.createPathParser = function createPathParser(childRouters, routeConfigs) {
    var pathConfigs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var initialRouteName = arguments[3];
    var initialRouteParams = arguments[4];
    var pathsByRouteNames = {};
    var paths = [];
    Object.keys(childRouters).forEach(function (routeName) {
      var pathPattern = pathConfigs[routeName] || routeConfigs[routeName].path;
      var matchExact = !!pathPattern && !childRouters[routeName];

      if (pathPattern === undefined) {
        pathPattern = routeName;
      }

      var keys = [];
      var re = void 0,
          toPath = void 0,
          priority = void 0;

      if (typeof pathPattern === 'string') {
        re = (0, _pathToRegexp2.default)(pathPattern, keys);
        toPath = _pathToRegexp2.default.compile(pathPattern);
        priority = 0;
      } else if (pathPattern === null) {
        re = (0, _pathToRegexp2.default)('*', keys);

        toPath = function toPath() {
          return '';
        };

        matchExact = true;
        priority = -1;
      }

      if (!matchExact) {
        var wildcardRe = (0, _pathToRegexp2.default)(pathPattern + "/*", keys);
        re = new RegExp("(?:" + re.source + ")|(?:" + wildcardRe.source + ")");
      }

      pathsByRouteNames[routeName] = {
        re: re,
        keys: keys,
        toPath: toPath,
        priority: priority,
        pathPattern: pathPattern
      };
    });
    paths = Object.entries(pathsByRouteNames);
    paths.sort(function (a, b) {
      return b[1].priority - a[1].priority;
    });

    var getActionForPathAndParams = function getActionForPathAndParams(pathToResolve) {
      var inputParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!pathToResolve) {
        return _NavigationActions2.default.navigate({
          routeName: initialRouteName,
          params: _extends({}, inputParams, initialRouteParams)
        });
      }

      var matchedRouteName = void 0;
      var pathMatch = void 0;
      var pathMatchKeys = void 0;

      for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref3;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref3 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref3 = _i.value;
        }

        var _ref = _ref3;

        var _ref2 = _slicedToArray(_ref, 2);

        var routeName = _ref2[0];
        var path = _ref2[1];
        var re = path.re,
            keys = path.keys;
        pathMatch = re.exec(pathToResolve);

        if (pathMatch && pathMatch.length) {
          pathMatchKeys = keys;
          matchedRouteName = routeName;
          break;
        }
      }

      if (!matchedRouteName) {
        return null;
      }

      var nestedAction = void 0;

      if (childRouters[matchedRouteName]) {
        nestedAction = childRouters[matchedRouteName].getActionForPathAndParams(pathMatch.slice(pathMatchKeys.length).join('/'), inputParams);

        if (!nestedAction) {
          return null;
        }
      }

      var params = pathMatch.slice(1).reduce(function (paramsOut, matchResult, i) {
        var key = pathMatchKeys[i];

        if (!key || key.asterisk) {
          return paramsOut;
        }

        var paramName = key.name;
        var decodedMatchResult = void 0;

        try {
          decodedMatchResult = decodeURIComponent(matchResult);
        } catch (e) {}

        paramsOut[paramName] = decodedMatchResult || matchResult;
        return paramsOut;
      }, _extends({}, inputParams));
      return _NavigationActions2.default.navigate(_extends({
        routeName: matchedRouteName
      }, params ? {
        params: params
      } : {}, nestedAction ? {
        action: nestedAction
      } : {}));
    };

    var getPathAndParamsForRoute = function getPathAndParamsForRoute(route) {
      var routeName = route.routeName,
          params = route.params;
      var childRouter = childRouters[routeName];
      var subPath = pathsByRouteNames[routeName].toPath(params);

      if (childRouter) {
        var child = childRouter.getPathAndParamsForState(route);
        return {
          path: subPath ? subPath + "/" + child.path : child.path,
          params: child.params ? _extends({}, params, child.params) : params
        };
      }

      return {
        path: subPath,
        params: params
      };
    };

    return {
      getActionForPathAndParams: getActionForPathAndParams,
      getPathAndParamsForRoute: getPathAndParamsForRoute
    };
  };
});